# ==============================
# M√ìDULO: Men√∫s
# ==============================

# Importaci√≥n de m√≥dulos para uso de clases dentro de los men√∫s
from clase_usuario import Estudiante, Catedratico
from clase_curso import Curso
from evaluaciones import Examen, Tarea

# Datos globales para almacenar los objetos del sistema y usarlos dentro del mismo
cursos = {}
estudiantes = {}
catedraticos = {}

# Clase base Menus
class Menus:
    # Funciones auxiliares de validaci√≥n de entrada de datos
    def pedir_id(self, mensaje):
        # Pide al usuario un ID num√©rico sin espacios
        while True:
            entrada = input(mensaje).strip()  # Elimina espacios
            if entrada.isdigit():  # Valida que sean n√∫meros
                return entrada
            print("‚ùå El ID debe ser num√©rico y sin espacios.")

    def pedir_nombre(self, mensaje):
        # Pide al usuario un nombre sin n√∫meros
        while True:
            entrada = input(mensaje).strip().title()
            if entrada.replace(" ", "").isalpha():  # Letras y espacios permitidos
                return entrada
            print("‚ùå El nombre no debe contener n√∫meros ni caracteres inv√°lidos.")

    # Men√∫ para Catedr√°tico
    def menu_catedratico(self, catedratico_id): # Se pide como par√°metro el ID del catedr√°tico
        while True:
            # Se muestra una lista de opciones √∫nicas para el catedr√°ico 
            print(f"\n--- Men√∫ Catedr√°tico ({catedraticos[catedratico_id].nombre}) ---") # Se muestra el nombre del catedr√°tico dentro del programa
            print("1. Crear curso")
            print("2. Inscribir estudiante en curso")
            print("3. Crear evaluaci√≥n")
            print("4. Registrar calificaci√≥n")
            print("5. Ver calificaciones")
            print("6. Reporte promedios bajos")
            print("0. Salir")
            op = input("Opci√≥n: ") # Selecci√≥n de opci√≥n

            if op == "1":  # Crear curso
                codigo = input("C√≥digo del curso: ") # Se pide c√≥digo del curso a crear
                nombre = input("Nombre del curso: ") # Se pide nombre del curso a crear

                # Se crea un objeto 'Curso' con c√≥digo, nombre y el catedr√°tico que lo cre√≥
                # Lo guarda en 'cursos' usando el c√≥digo como clave
                cursos[codigo] = Curso(codigo, nombre, catedraticos[catedratico_id])
                print(f"‚úÖ Curso '{nombre}' creado por {catedraticos[catedratico_id].nombre}")

            elif op == "2":  # Inscribir estudiante
                # Verifica que existan cursos
                if not cursos:
                    print("‚ö†Ô∏è No hay cursos creados a√∫n.")
                    continue

                # Enlista los cursos disponibles con sus c√≥digo y nombres
                print("\nüìò Cursos disponibles:")
                for c in cursos.values():
                    print(f"- {c.getCodigo()} - {c.getNombre()}")
                codigo = input("C√≥digo del curso: ") # Pide al usuario el ingreso del c√≥digo del curso a inscribir

                # Valida el c√≥digo del curso
                if codigo in cursos:
                    # Verifica que existan estudiantes registrados en el curso
                    if not estudiantes:
                        print("‚ö†Ô∏è No hay estudiantes registrados a√∫n.")
                        continue
                    # Enlista los estudiantes disponibles a inscribir con su ID y nombre
                    print("\nüë• Estudiantes disponibles:")
                    for e in estudiantes.values():
                        print(f"- {e.id} - {e.nombre}")
                    est_id = self.pedir_id("ID del estudiante: ") # Pide el ingreso del ID del estudiante a inscribir y lo valida

                    # Se valida el ID del estudiante y se agrega al curso po
                    if est_id in estudiantes:
                        cursos[codigo].agregar_estudiante(estudiantes[est_id]) # A√±ade al estudiante a la lista de inscritos del curso por medio del m√©todo 'agregar_estudiantes' de la clase 'Curso'
                    else:
                        print("‚ùå Estudiante no encontrado.")
                else:
                    print("‚ùå Curso no encontrado.")

            elif op == "3":  # Crear evaluaci√≥n
                # Verifica que existan cursos
                if not cursos:
                    print("‚ö†Ô∏è No hay cursos creados a√∫n.")
                    continue

                # Muestra el listado de cursos disponibles
                print("\nüìò Cursos disponibles:")
                for c in cursos.values():
                    print(f"- {c.getCodigo()} - {c.getNombre()}")
                codigo = input("C√≥digo del curso: ") # Ingresa el c√≥digo del curso 
                # Verifca el c√≥digo del curso 
                if codigo in cursos:
                    # Se pide el tipo, nombre y ponderaci√≥n de la evaluaci√≥n a crear
                    tipo = input("Tipo (examen/tarea): ").lower() 
                    nombre = input("Nombre de la evaluaci√≥n: ")
                    # Manejo de errores en entrada tipo float de 'ponderaci√≥n'
                    try:
                        ponderacion = float(input("Ponderaci√≥n (ej. 0.3): "))
                    except ValueError:
                        print("‚ùå Ponderaci√≥n inv√°lida. Debe ser un n√∫mero.")
                        continue

                    # Se verifica que tipo de evaluaci√≥n es
                    if tipo == "examen":
                        # Si es de tipo 'examen' se pide su atributo espec√≠fico 
                        # Manejo de errores en entrada tipo int de 'duraci√≥n'
                        try:
                            duracion = int(input("Duraci√≥n en minutos: "))
                        except ValueError:
                            print("‚ùå Duraci√≥n inv√°lida. Debe ser un n√∫mero entero.")
                            continue
                        evaluacion = Examen(nombre, ponderacion, duracion)  # Se crea el objeto para agregar al curso
                    else:
                        # Si no, es de tipo 'tarea' y se piden sus atributos espec√≠ficos 
                        fecha = input("Fecha de entrega: ")
                        evaluacion = Tarea(nombre, ponderacion, fecha) # Se crea el objeto para agregar al curso

                    # Se agrega al curso con su m√©todo 'agregar_evaluacion' por medio del objeto 'evaluacion'
                    cursos[codigo].agregar_evaluacion(evaluacion)
                else:
                    print("‚ùå Curso no encontrado.")

            elif op == "4":  # Registrar calificaci√≥n
                # Se verifica que existan cursos
                if not cursos:
                    print("‚ö†Ô∏è No hay cursos creados a√∫n.")
                    continue

                # Muestra el listado de cursos disponibles
                print("\nüìò Cursos disponibles:")
                for c in cursos.values():
                    print(f"- {c.getCodigo()} - {c.getNombre()}")
                codigo = input("C√≥digo del curso: ") # Se ingresa el c√≥digo del curso donde se registrar√° la calificaci√≥n
                
                # Se valida que exista el curso ingresado
                if codigo in cursos:
                    curso = cursos[codigo] # Se asigna el curso en donde se estar√° trabajando

                    # Valida que existan evaluaciones dentro del curso
                    if not curso.getEvaluaciones():
                        print("‚ö†Ô∏è No hay evaluaciones en este curso.")
                        continue

                    # Enlista los estudiantes disponibles a inscribir con su ID y nombre
                    print("\nüë• Estudiantes en el curso:")
                    for e in curso.getEstudiantes().values():
                        print(f"- {e.id} - {e.nombre}")
                    est_id = self.pedir_id("ID del estudiante: ") # Se pide el ingreso del ID del estudiante para su nota y lo valida

                    # Valida que exista el estudiante dentro del curso
                    if est_id not in curso.getEstudiantes():
                        print("‚ùå Estudiante no inscrito en el curso.")
                        continue

                    # Enlista las evaluaciones que est√°n dentro del curso
                    print("\nEvaluaciones disponibles:")
                    for idx, ev in enumerate(curso.getEvaluaciones(), 1):
                        print(f"{idx}. {ev.tipo()} {ev.nombre}")

                    # Ingreso del ID de la evaluaci√≥n y la nota a registrar con manejo de errores en entrada
                    try:
                        idx = int(input("Elige evaluaci√≥n: ")) - 1
                        nota = float(input("Nota: "))
                    except ValueError:
                        print("‚ùå Entrada inv√°lida. Debe ingresar n√∫meros.")
                        continue

                    # Validaci√≥n del rango de opciones de evaluaci√≥n
                    if 0 <= idx < len(curso.getEvaluaciones()):
                        # Se obtiene la lista de evaluaciones del curso
                        # Se selecciona la evaluaci√≥n elegida por su √≠ndice
                        # Se llama al m√©todo 'asignar_nota' de esa evaluaci√≥n, registrando la nota del estudiante en esa evaluaci√≥n espec√≠fica
                        curso.getEvaluaciones()[idx].asignar_nota(est_id, nota, curso.getEstudiantes())
                        print("‚úÖ Nota registrada.")
                    else:
                        print("‚ùå N√∫mero de evaluaci√≥n inv√°lido.")
                else:
                    print("‚ùå Curso no encontrado.")

            elif op == "5":  # Ver calificaciones
                # Validar la existencia de cursos
                if not cursos:
                    print("‚ö†Ô∏è No hay cursos creados a√∫n.")
                    continue

                # Muestra el listado de cursos disponibles
                print("\nüìò Cursos disponibles:")
                for c in cursos.values():
                    print(f"- {c.getCodigo()} - {c.getNombre()}")
                codigo = input("C√≥digo del curso: ") # Ingreso del c√≥digo del curso a ver las calificaciones
                
                # Verifica existencia del curso
                if codigo in cursos:
                    cursos[codigo].mostrar_calificaciones() # Se llama al m√©todo 'mostrar_calificaciones' del m√≥dulo 'evaluaciones'
                else:
                    print("‚ùå Curso no encontrado.")

            elif op == "6":  # Reporte de promedios bajos
                # Validar la existencia de cursos
                if not cursos:
                    print("‚ö†Ô∏è No hay cursos creados a√∫n.")
                    continue

                # Muestra el listado de cursos disponibles
                print("\nüìò Cursos disponibles:")
                for c in cursos.values():
                    print(f"- {c.getCodigo()} - {c.getNombre()}")
                codigo = input("C√≥digo del curso: ") # Ingreso del c√≥digo del curso
                
                # Verifica existencia del curso
                if codigo in cursos:
                    cursos[codigo].reporte_promedios_bajos() # Se llama al m√©todo 'reporte_promedios_bajos' del m√≥dulo 'evaluaciones'
                else:
                    print("‚ùå Curso no encontrado.")

            elif op == "0": # Opci√≥n para finalizar el men√∫ del catedr√°tico
                break
            else: # Ingreso de opci√≥n fuera de rango de opciones del men√∫
                print("‚ùå Opci√≥n inv√°lida.")

    # Men√∫ para Estudiante
    def menu_estudiante(self, estudiante_id): # Se pide como par√°metro el ID del estudiante a ingresar
        while True:
            # Se muestra una lista de opciones √∫nicas para el estudiante
            print(f"\n--- Men√∫ Estudiante ({estudiantes[estudiante_id].nombre}) ---") # Se muestra el nombre del catedr√°tico dentro del programa
            print("1. Ver cursos inscritos")
            print("2. Ver calificaciones")
            print("0. Salir")
            op = input("Opci√≥n: ") # Ingreso de opci√≥n

            if op == "1":  # Ver cursos inscritos
                # Se obtiene todos los cursos en los que un estudiante est√° inscrito y los guarda en la lista 'cursos_inscritos'
                cursos_inscritos = [c for c in cursos.values() if estudiante_id in c.getEstudiantes()]
                # Verifica que el estudiante est√© inscrito a cursos
                if not cursos_inscritos:
                    print("‚ö†Ô∏è No est√°s inscrito en ning√∫n curso.")
                else:
                    # Se desenglosa los cursos en los cuales est√° inscrito
                    print("\nüìò Cursos inscritos:")
                    for c in cursos_inscritos:
                        print(f"- {c.getNombre()} (Catedr√°tico: {c.getCatedratico().nombre})")

            elif op == "2":  # Ver calificaciones
                # Se obtiene todos los cursos en los que un estudiante est√° inscrito y los guarda en la lista 'cursos_inscritos'
                cursos_inscritos = [c for c in cursos.values() if estudiante_id in c.getEstudiantes()]
                # Verifica que el estudiante est√© inscrito a cursos
                if not cursos_inscritos:
                    print("‚ö†Ô∏è No est√°s inscrito en ning√∫n curso.")
                else:
                    # Recorre los cursos en los cu√°les est√° inscrito el estudiante
                    for c in cursos_inscritos:
                        # Calcula el promedio del estudiante del curso 'c' iterado, por medio del m√©todo 'promedio_estudiante' del m√≥dulo 'clase_curso'
                        prom = c.promedio_estudiante(estudiante_id)
                        if not c.getEvaluaciones(): # Verificaci√≥n de existencia de evaluaciones dentro del curso
                            print(f"\nüìò {c.getNombre()} - ‚ö†Ô∏è No hay evaluaciones registradas.")
                        else:
                            # Mustra el curso y promedio si existe o 'Sin notas' si no existe
                            print(f"\nüìò {c.getNombre()} - Promedio: {prom if prom else 'Sin notas'}")
                            # Recorre las evaluaciones y obtiene la nota por medio del m√©todo 'obtener_nota' del m√≥dulo 'evaluaciones'
                            for ev in c.getEvaluaciones():
                                nota = ev.obtener_nota(estudiante_id)
                                print(f"  {ev.tipo()} {ev.nombre}: {nota if nota else 'Sin nota'}")

            elif op == "0": # Opci√≥n para finalizar el men√∫ del estudiante
                break
            else: # Ingreso de opci√≥n fuera de rango de opciones del men√∫
                print("‚ùå Opci√≥n inv√°lida.")

    # Men√∫ Principal
    def menu_principal(self):
        while True:
            # Lista de opciones del men√∫ principal
            print("\n--- Men√∫ Principal ---")
            print("1. Registrar estudiante")
            print("2. Registrar catedr√°tico")
            print("3. Ingresar como estudiante")
            print("4. Ingresar como catedr√°tico")
            print("0. Salir")
            op = input("Opci√≥n: ") # Ingreso de opci√≥n

            if op == "1":  # Registrar estudiante
                id_est = self.pedir_id("ID del estudiante: ") # Ingreso del ID del estudiante valid√°ndolo
                # Manejo de duplicaci√≥n de ID registrado 
                if id_est in estudiantes:
                    print("‚ö†Ô∏è Ya existe un estudiante con ese ID.")
                    continue

                nombre = self.pedir_nombre("Nombre del estudiante: ").title() # Ingreso del nombre del estudiante a registrar y valid√°ndolo
                estudiantes[id_est] = Estudiante(id_est, nombre) # Se agrega el registro del estudiante al diccionario 'estudiantes' con el objeto del m√≥dulo 'clase_usuario'
                print(f"‚úÖ Estudiante {nombre} registrado.")

            elif op == "2":  # Registrar catedr√°tico
                id_cat = self.pedir_id("ID del catedr√°tico: ") # Ingreso del ID del catedr√°tico y valid√°ndolo
                # Manejo de duplicaci√≥n de ID registrado
                if id_cat in catedraticos:
                    print("‚ö†Ô∏è Ya existe un catedr√°tico con ese ID.")
                    continue

                nombre = self.pedir_nombre("Nombre del catedr√°tico: ").title() # Ingreso del nombre del catedr√°tico a registrar y valid√°ndolo
                catedraticos[id_cat] = Catedratico(id_cat, nombre) # Se agrega el registro del catedr√°tico al diccionario 'catedraticos' con el objeto del m√≥dulo 'clase_usuario'
                print(f"‚úÖ Catedr√°tico {nombre} registrado.")

            elif op == "3":  # Ingresar como estudiante
                id_est = self.pedir_id("ID del estudiante: ") # Ingreso del ID del estudiante y valid√°ndolo
                # Verifica el registro del estudiante
                if id_est in estudiantes:
                    self.menu_estudiante(id_est) # Se llama al men√∫ para estudiantes
                else:
                    print("‚ùå Estudiante no registrado.")

            elif op == "4":  # Ingresar como catedr√°tico
                id_cat = self.pedir_id("ID del catedr√°tico: ") # Ingreso del ID del catedr√°tico y valid√°ndolo
                # Verifica el registro del catedr√°tico
                if id_cat in catedraticos:
                    self.menu_catedratico(id_cat) # Se llama al men√∫ para catedr√°ticos
                else:
                    print("‚ùå Catedr√°tico no registrado.")

            elif op == "0":  # Opci√≥n para salir del programa
                print("üëã Saliendo del sistema...")
                break
            else: # Ingreso de opci√≥n fuera de rango de opciones del men√∫
                print("‚ùå Opci√≥n inv√°lida.")